{
  parserClass="org.mvnsearch.plugins.wit.lang.parser.WitParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Wit"
  psiImplClassSuffix="Impl"
  psiPackage="org.mvnsearch.plugins.wit.lang.psi"
  psiImplPackage="org.mvnsearch.plugins.wit.lang.psi.impl"

  elementTypeHolderClass="org.mvnsearch.plugins.wit.lang.psi.WitTypes"
  elementTypeClass="org.mvnsearch.plugins.wit.lang.psi.WitElementType"
  tokenTypeClass="org.mvnsearch.plugins.wit.lang.psi.WitTokenType"

  tokens=[
              LBRACE      =  '{'
              RBRACE      =  '}'
              LBRACK      =  '['
              RBRACK      =  ']'
              LPAREN      =  '('
              RPAREN      =  ')'
              COLON       =  ':'
              COMMA       =  ','
              SEMICOLON   =  ';'
              EQ          =  '='
              EXCL        =  '!'
              EXCLEQ      =  '!='
              EQEQ        =  '=='
              PLUS        =  '+'
              MINUS       =  '-'
              MUL         =  '*'
              DIV         =  '/'
              REM         =  '%'
              OR          =  '|'
              LT          =  '<'
              LT_EQ       =  '<='
              GT          =  '>'
              GT_EQ       =  '>='
              DOT         =  '.'
              DOTDOT      =  '..'
              ARROW       =  '->'
              AT          =  '@'
              DOLLAR      =  '$'
              WHITE_SPACE = 'regexp:[ \t\r\n]+'
              IDENTIFIER = 'regexp:[a-zA-Z0-9][_a-zA-Z0-9]*'
              COMMENT = 'regexp:("//")[^\n]*'
              DOC_COMMENT = 'regexp:("///")[^\n]*'
              BLOCK_COMMENT_START = '/*'
              BLOCK_COMMENT_END = '*/'
              INTEGER_LITERAL = 'regexp:\d+'
              DOUBLE_LITERAL = 'regexp:(\d[\d_]*)(\.)(\d[\d_]*)'
              CHAR_LITERAL = "regexp:([^\r\n \t]*)"
              STRING_LITERAL = 'regexp:("[^\\"\r\n]*")'
              BUILTIN_TYPE = 'builtin_type'
              RESERVED_KEYWORD = 'reserved_keyword'
              IDENTIFIER = 'regexp:[a-z][_a-zA-Z0-9-]*'
          ]
}



WitDocument ::= any*

private recover ::= !(any)
private any ::= !<<eof>> ( interface-item | world-item | NEW_LINE | DOC_COMMENT | COMMENT | comment-block ) {pin=1 recoverWhile=recover}

comment-block ::= BLOCK_COMMENT_START (WHITE_SPACE | CHAR_LITERAL)* BLOCK_COMMENT_END

// types
ty ::= BUILTIN_TYPE | IDENTIFIER
tuple ::= 'tuple' '<' tuple-list '>'
tuple-list ::= tuple-type (',' tuple-type)* ','?
tuple-type ::= list|tuple|ty
list ::= 'list' '<' list-type '>'
list-type ::= tuple|list|option|ty
option ::= 'option' '<' option-type '>'
option-type ::= option | list | tuple | result | ty
result ::= 'result' '<' result-type ',' result-type '>' | 'result' '<' '_' ',' result-type '>' | 'result' '<' result-type '>' | 'result'
result-type ::= tuple|list|option|ty
wit-type ::= tuple | list | option | result | '%' BUILTIN_TYPE | ty

// world item
world-item ::= 'default'? 'world' world-name '{' world-items*  '}' {pin=2}
world-name ::= IDENTIFIER
world-items ::= world-export-item | world-import-item  | typedef-item | use-item
world-export-item ::= 'export' world-export-item-name ':' world-extern-type
world-export-item-name ::= IDENTIFIER
world-import-item ::= 'import' world-import-item-name ':' world-extern-type
world-import-item-name ::= IDENTIFIER
world-extern-type ::= func-type | world-interface-type
world-interface-type ::= world-interface-type-inline | use-path
world-interface-type-inline ::= 'interface' '{' interface-items* '}'

// use item
use-item ::= 'use' use-path '.' '{' use-names-list '}'
use-names-list ::= use-names-type (',' use-names-type)*
use-names-type ::= use-names-type-name 'as' use-names-type-alias | use-names-type-name
use-names-type-name ::= IDENTIFIER
use-names-type-alias ::= IDENTIFIER | '%' BUILTIN_TYPE
use-path ::= use-path-part ('.' use-path-part)*
use-path-part ::= IDENTIFIER

// interface item
interface-item ::= 'default'? 'interface' interface-name '{' interface-items* '}' { pin=2 }
interface-name ::= IDENTIFIER
interface-items ::= typedef-item | use-item | func-item

// typedef item
typedef-item ::= resource-item | variant-item | record-item | union-item | flags-item | enum-item | type-item

// type item
type-item ::= 'type' type-item-name '=' wit-type  {pin=1}
type-item-name ::= IDENTIFIER

// flags item
flags-item ::= 'flags' flags-item-name '{' flags-fields '}' {pin=1}
flags-item-name ::= IDENTIFIER
flags-fields ::= flags-field-name (',' flags-field-name)* ','?
flags-field-name ::= IDENTIFIER

// variant item
variant-item ::= 'variant' variant-item-name '{' variant-cases '}' {pin=1}
variant-item-name ::= IDENTIFIER
variant-cases ::= variant-case (',' variant-case)* ','?
variant-case ::=  variant-case-name '(' wit-type ')' | variant-case-name
variant-case-name ::= IDENTIFIER

// enum item
enum-item ::= 'enum' enum-item-name '{' enum-cases '}' {pin=1}
enum-item-name ::= IDENTIFIER
enum-cases ::= enum-case-name (',' NEW_LINE* enum-case-name)* ','?
enum-case-name ::= IDENTIFIER

// union item
union-item ::= 'union' union-item-name '{' union-cases '}' {pin=1}
union-item-name ::= IDENTIFIER
union-cases ::= union-case-type (',' union-case-type)* ','?
union-case-type ::= wit-type

// resource item
resource-item ::= 'resource' resource-item-name '{' func-item* '}' {pin=1}
resource-item-name ::= IDENTIFIER

// record item
record-item ::= 'record' record-item-name '{' record-fields? '}' {pin=1}
record-item-name ::= IDENTIFIER
record-fields ::= record-field (',' record-field)* ','?
record-field ::= record-field-name ':' wit-type
record-field-name ::= IDENTIFIER

// function item
func-item ::= func-name ':' func-type
func-name ::= '%'? (IDENTIFIER | BUILTIN_TYPE | RESERVED_KEYWORD)
func-type ::= 'func' '(' func-param-list? ')' func-result?
func-param-list ::=  func-param ( ',' func-param )* ','?
func-param ::= func-param-name ':' wit-type
func-param-name ::= '%'? (IDENTIFIER | BUILTIN_TYPE | RESERVED_KEYWORD)
func-result ::=  '->' wit-type | '->' '(' func-result-list? ')'
func-result-list ::= func-result-named-pair ( ',' func-result-named-pair )*
func-result-named-pair ::= func-result-named-pair-name ':' wit-type
func-result-named-pair-name ::= '%'? (IDENTIFIER | BUILTIN_TYPE | RESERVED_KEYWORD)



