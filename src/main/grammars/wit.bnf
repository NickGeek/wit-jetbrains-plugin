{
  parserClass="org.mvnsearch.plugins.wit.lang.parser.WitParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Wit"
  psiImplClassSuffix="Impl"
  psiPackage="org.mvnsearch.plugins.wit.lang.psi"
  psiImplPackage="org.mvnsearch.plugins.wit.lang.psi.impl"

  elementTypeHolderClass="org.mvnsearch.plugins.wit.lang.psi.WitTypes"
  elementTypeClass="org.mvnsearch.plugins.wit.lang.psi.WitElementType"
  tokenTypeClass="org.mvnsearch.plugins.wit.lang.psi.WitTokenType"

  tokens=[
              LBRACE      =  '{'
              RBRACE      =  '}'
              LBRACK      =  '['
              RBRACK      =  ']'
              LPAREN      =  '('
              RPAREN      =  ')'
              COLON       =  ':'
              COMMA       =  ','
              SEMICOLON   =  ';'
              EQ          =  '='
              EXCL        =  '!'
              EXCLEQ      =  '!='
              EQEQ        =  '=='
              PLUS        =  '+'
              MINUS       =  '-'
              MUL         =  '*'
              DIV         =  '/'
              REM         =  '%'
              OR          =  '|'
              LT          =  '<'
              LT_EQ       =  '<='
              GT          =  '>'
              GT_EQ       =  '>='
              DOT         =  '.'
              DOTDOT      =  '..'
              ARROW       =  '->'
              AT          =  '@'
              DOLLAR      =  '$'
              IDENTIFIER = 'regexp:[a-zA-Z0-9][_a-zA-Z0-9]*'
              COMMENT = 'regexp:("//")[^\n]*'
              DOC_COMMENT = 'regexp:("///")[^\n]*'
              BLOCK_COMMENT_START = '/*'
              BLOCK_COMMENT_END = '*/'
              INTEGER_LITERAL = 'regexp:\d+'
              DOUBLE_LITERAL = 'regexp:(\d[\d_]*)(\.)(\d[\d_]*)'
              CHAR_LITERAL = "regexp:([^\r\n \t]*)"
              STRING_LITERAL = 'regexp:("[^\\"\r\n]*")'
              BUILTIN_TYPE = 'builtin_type'
              RESERVED_KEYWORD = 'reserved_keyword'
              IDENTIFIER = 'regexp:[a-z][_a-zA-Z0-9-]*'
          ]
}



WitDocument ::= any*

private recover ::= !(any)
private any ::= !<<eof>> ( interface-item | world-item | NEW_LINE | DOC_COMMENT | COMMENT | comment-block ) {pin=1 recoverWhile=recover}

comment-block ::= BLOCK_COMMENT_START (NEW_LINE | CHAR_LITERAL)* BLOCK_COMMENT_END

// types
ty ::= BUILTIN_TYPE | IDENTIFIER
tuple ::= 'tuple' '<' tuple-list '>'
tuple-list ::= ty | ty ',' tuple-list?
list ::= 'list' '<' ty '>'
option ::= 'option' '<' ty '>'
result ::= 'result' '<' ty ',' ty '>' | 'result' '<' '_' ',' ty '>' | 'result' '<' ty '>' | 'result'
wit-type ::= tuple | list | option | result | ty

// word item
world-item ::= 'default'? 'world' world-name '{'  '}'
world-name ::= IDENTIFIER

// interface item
interface-item ::= 'default'? 'interface' interface-name '{' interface-items* '}'
interface-name ::= IDENTIFIER
interface-items ::= typedef-item | use-item | func-item

typedef-item ::= resource-item
               | variant-items
               | record-item
               | union-items
               | flags-items
               | enum-items
               | type-item

// function item
func-item ::= func-name ':' func-type
func-name ::= IDENTIFIER
func-type ::= 'func' '(' func-param-list? ')' func-result?
func-param-list ::=  func-param ( ',' func-param )*
func-param ::= func-param-name ':' wit-type
func-param-name ::= IDENTIFIER
func-result ::=  '->' wit-type | '->' '(' func-result-list ')'
func-result-list ::= func-result-named-pair ( ',' func-result-named-pair )*
func-result-named-pair ::= func-result-named-pair-name ':' wit-type
func-result-named-pair-name ::= IDENTIFIER



